{"version":3,"file":"image-pal-rgb.js","sources":["webpack:///webpack/bootstrap e9229b125e3bda30b008","webpack:///lib/shared/get-options.js","webpack:///lib/shared/get-colors.js","webpack:///webpack/rgb.js","webpack:///lib/rgb.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e9229b125e3bda30b008","module.exports = ({ hasAlpha, maxColors, minDensity, /*maxDensity,*/ cubicCells, mean, order, ...otherOptions } = {}) => {\n  if (typeof hasAlpha !== 'boolean') throw new Error('options.hasAlpha is required');\n  \n  const options = {\n    hasAlpha,\n    maxColors: Math.min(Math.max(1, maxColors), 32) || 10,\n    minDensity: Math.min(Math.max(0.001, minDensity), 1) || 0.005,\n    //maxDensity: maxDensity === false ? false : (Math.min(Math.max(0.001, maxDensity), 1) || false),\n    cubicCells: Math.min(Math.max(3, cubicCells), 4) || 4,\n    mean: mean === false ? false : true,\n    order: order === 'density' ? order : 'distance',\n    ...otherOptions // forward\n  };\n\n  return options;\n};\n\n\n\n// WEBPACK FOOTER //\n// lib/shared/get-options.js","module.exports = (imageData, { hasAlpha, maxColors, minDensity, /*maxDensity,*/ cubicCells, mean, order, applyColor, colorPlacer }) => {\n  // pre-allocate cells3d[x][y][z]\n  // pre-allocate cells[i]\n  let x, y, z, i, cell;\n  const cells3d = new Array(cubicCells);\n  let cells = new Array(Math.pow(cubicCells, 3));\n  for (x = 0, i = 0; x < cubicCells; x++) {\n    cells3d[x] = new Array(cubicCells);\n    for (y = 0; y < cubicCells; y++) {\n      cells3d[x][y] = new Array(cubicCells);\n      for (z = 0; z < cubicCells; z++, i++) {\n        cells3d[x][y][z] = cells[i] = [];\n      }\n    }\n  }\n\n  const bytesPerPixel = hasAlpha ? 4 : 3;\n\n  // color placement\n  let byte, color;\n  const pixels = Math.floor(imageData.length / bytesPerPixel);\n  for (byte = 0, i = 0; i < pixels; byte += bytesPerPixel, i++) {\n    color = {\n      rgb: [ imageData[byte], imageData[byte + 1], imageData[byte + 2] ],\n      alpha: hasAlpha ? imageData[byte + 3] : 255\n    };\n\n    if (applyColor) applyColor(color); // apply any color logic, if any\n    color.xyz = colorPlacer(color);\n    color.distance = getDistance(color);\n    const xyz = findCell(color.xyz, cubicCells);\n    cells3d[xyz[0]][xyz[1]][xyz[2]].push(color);\n  }\n\n  // sort cells\n  cells.sort((a, b) => a.length > b.length ? -1 : a.length < b.length ? 1 : 0);\n\n  // compute cell densities\n  let cellDensities = cells.map(colors => {\n    return {\n      density: (colors.length / pixels),\n      colors\n    };\n  });\n\n  // remove cells that don't meet min criteria\n  cellDensities = cellDensities.filter(cellData => cellData.density >= minDensity);\n\n  /* support for maxDensity is disabled for now -- not working as intended. might need a per-colour-space filter option\n  if (maxDensity && cellDensities.length > 1 && cellDensities[0].density >= maxDensity) {\n    // only filter if:\n    // 1. maxDensity is enabled\n    // 2. More than one cell exists\n    // 3. Meets the maxDensity requirement\n    // 4. Never filter more than the first matching cell\n    cellDensities = cellDensities.slice(1); // remove first\n  }*/\n\n  // adhere to maxColors\n  if (cellDensities.length > maxColors) {\n    cellDensities = cellDensities.slice(0, maxColors); \n  }\n\n  // with remaining cells that match critera, extract mean or median colors\n  let palette = cellDensities.map(cellData => {\n    if (mean) { // apply mean calculations\n      const sumRgb = cellData.colors.reduce((state, c) => {\n        state.r += c.rgb[0];\n        state.g += c.rgb[1];\n        state.b += c.rgb[2];\n        return state;\n      }, { r: 0, g: 0, b: 0 });\n      const len = cellData.colors.length;\n      color = {\n        rgb: [\n          Math.min(255, Math.round(sumRgb.r / len)),\n          Math.min(255, Math.round(sumRgb.g / len)),\n          Math.min(255, Math.round(sumRgb.b / len))\n        ],\n        alpha: cellData.colors[0].alpha // dumb alpha copy\n      };\n      if (applyColor) applyColor(color); // update if color applicator provided\n      color.xyz = colorPlacer(color); // re-calc placement in 3d space\n    } else { // grab median color\n      // first we must sort based on distance\n      /* istanbul ignore next */ \n      const colorsByDistance = cellData.colors.sort((a, b) => a.distance > b.distance ? -1 : a.distance < b.distance ? 1 : 0);\n      \n      // now we can grab median\n      color = colorsByDistance[Math.floor(cellData.colors.length / 2)];\n    }\n\n    // attach hex colors for final palette\n    color.hex = rgbToHex(color.rgb[0], color.rgb[1], color.rgb[2]);\n    color.density = cellData.density;\n    color.distance = getDistance(color);\n    \n    return color;\n  });\n  \n  if (order === 'distance') { // sort by distance\n    palette = palette.sort((a, b) => a.distance > b.distance ? -1 : a.distance < b.distance ? 1 : 0);\n  } // else, already sorted by density\n\n  return palette;\n};\n\nfunction findCell(xyz, cubicCells) {\n  return [\n    Math.max(0, Math.ceil(Math.min(xyz[0], 1) * cubicCells) - 1),\n    Math.max(0, Math.ceil(Math.min(xyz[1], 1) * cubicCells) - 1),\n    Math.max(0, Math.ceil(Math.min(xyz[2], 1) * cubicCells) - 1)\n  ];\n}\n\nfunction componentToHex(c) {\n  const hex = c.toString(16);\n  return hex.length === 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nfunction getDistance(color) {\n  return color.distance = color.xyz[0] + (color.xyz[1]*10) + (color.xyz[2]*100);\n}\n\n// https://www.compuphase.com/cmetric.htm\n/*function distanceSorter(c1, c2) {\n  const rmean = ( c1.rgb[0] + c2.rgb[0] ) / 2;\n  const r = c1.rgb[0] - c2.rgb[0];\n  const g = c1.rgb[1] - c2.rgb[1];\n  const b = c1.rgb[2] - c2.rgb[2];\n  return Math.sqrt((((512+rmean)*r*r)>>8) + 4*g*g + (((767-rmean)*b*b)>>8));\n}*/\n\n\n\n// WEBPACK FOOTER //\n// lib/shared/get-colors.js","import imagePal from '../lib/rgb';\r\n\r\nwindow.imagePalRgb = imagePal;\r\n\n\n\n// WEBPACK FOOTER //\n// webpack/rgb.js","const getOptions = require('./shared/get-options');\r\nconst getColors = require('./shared/get-colors');\r\n\r\nmodule.exports = (imageData, { colorPlacer, ...options }) => {\r\n  const opts = {\r\n    colorPlacer: colorPlacer || rgbColorPlacer,\r\n    ...getOptions(options)\r\n  };\r\n  return getColors(imageData, opts);\r\n};\r\n\r\nfunction rgbColorPlacer(c) {\r\n  return [\r\n    c.rgb[0] / 256,\r\n    c.rgb[1] / 256,\r\n    c.rgb[2] / 256\r\n  ];\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// lib/rgb.js"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;;;;;;AC7DA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAUA;AACA;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AANA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACjIA;AACA;;;;;AACA;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAKA;;;A","sourceRoot":""}